/*
=============================================================================
Title : main.cpp
Description : This program simulates an elevator operating system. It
              communicates with a Flask API written by Dr. Eric Rees to read
              in data and process it according to a ******* algorithm to
              efficiently run the elevator system
Author : Jaden Hicks & Josh Josey
Date : 05/04/2025
Version : 1.0
Usage : Compile and run this program using the GNU C++ compiler
Notes : -   This program requires that the API is running on the port provided
            as a command line argument
        -   Must be compiled with the -pthread -lcurl flags
C++ Version : 11 or higher
=============================================================================
*/
#include <iostream>
#include <fstream>
#include <curl/curl.h>
#include "building.h"
#include "api_control.h"

int main(int argc, char *argv[]) {
    if (argc != 3) {
        std::cerr << "Usage: " << argv[0] << " <path to input file> <port>" << std::endl;
        return 1;
    }

    // -- Following was adapted from GitHub Copilot --

    std::ifstream inp(argv[1]);
    if (!inp.is_open()) {
        std::cerr << "Could not open file: " << argv[1] << std::endl;
        return 1;
    }

    Building building = setup_building(inp);
    if (building.numElevators() == 0) {
        std::cerr << "Building setup failed." << std::endl;
        return 1;
    }
    inp.close();

    std::cout << "Building has " << building.numElevators() << " elevators." << std::endl;
    for (int i = 0; i < building.numElevators(); i++) {
        std::cout << "Elevator " << building.elevators[i].getName() << ": "
                  << "Lowest floor: " << building.elevators[i].getLowest() << ", "
                  << "Highest floor: " << building.elevators[i].getHighest() << ", "
                  << "Current floor: " << building.elevators[i].getCurrent() << ", "
                  << "Capacity: " << building.elevators[i].getCapactiy() << std::endl;
    }
    // -- End of GitHub Copilot adaptation -- (this comment was generated by Copilot haha)

    
    std::cout << "Starting Elevator OS..." << std::endl;
    std::string port = argv[2];
    std::string host = "http://localhost:" + port;
    std::cout << "Host: " << host << std::endl;
    // initialize curl
    curl_global_init(CURL_GLOBAL_ALL);

    //ensure the api is running
	simulationControl(host,"check");
	simulationControl(host,"start");
	simulationControl(host,"check");

	//check the status of an elevator
	elevatorStatus(host,"HotelBayA");
    //see if you can get the next person
    Person test(nextInput(host));
    test.print();
    //see if you can add someone to an elevator
    addToElevator(host, test.getId(), "HotelBayA");
    // ensure the API stopped
	simulationControl(host,"check");
	simulationControl(host,"stop");
	simulationControl(host,"check");

	//cleanup curl
    curl_global_cleanup();
    return 0;
}